{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputfocus","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81d5192f.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'; //hooks\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '' );\r\n\r\n    const inputfocus = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputfocus.current.focus()\r\n    })\r\n    \r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 100000),\r\n            text: input\r\n        });\r\n        setInput('');//clear box\r\n    };\r\n\r\n    return (\r\n\r\n            <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n              {props.edit ? ( \r\n              <>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Update your task\" \r\n                value={input}  \r\n                name=\"text\" \r\n                className=\"todo-input edit\"\r\n                onChange={handleChange}\r\n                ref={inputfocus}//add focus\r\n              />\r\n              <button className=\"todo-button edit\">Update To Do</button>\r\n              </>\r\n\r\n              ) :( \r\n                <>\r\n              <input \r\n                type=\"text\" \r\n                placeholder=\"Add a todo\" \r\n                value={input} \r\n                name=\"text\" \r\n                className=\"todo-input\"\r\n                onChange={handleChange}\r\n                ref={inputfocus}//add focus\r\n              />\r\n              <button className=\"todo-button\">Add To Do</button>\r\n              </>\r\n              \r\n              )}\r\n\r\n           </form>\r\n\r\n    )\r\n};\r\n\r\nexport default TodoForm;\r\n ","// React with Hooks for To Do list.\r\nimport React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} /> \r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div \r\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n            key ={index}\r\n        >\r\n\r\n            <div \r\n                key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine onClick={() => removeTodo(todo.id)} className='delete-icon'/>\r\n                <TiEdit onClick={() => setEdit({id: todo.id, value: todo.text})} className='edit-icon'/>\r\n            </div>\r\n\r\n        </div>\r\n    ));\r\n    \r\n};\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList(){\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removeArr);\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Todays To-Do List</h3>  \r\n            <TodoForm onSubmit={addTodo}  /> \r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} \r\n                updateTodo={updateTodo}/>     \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n  return (\n        <div className=\"todo-app\">\n          <h1><TodoList /></h1>\n        </div>\n        \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}